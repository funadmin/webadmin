<?php

namespace app\install\controller;

use app\common\controller\Controller;
use support\Request;
use support\View;

class Index extends Controller
{
    protected $config;
    //错误信息
    protected $msg = '';
    //安装文件
    protected $lockFile;
    //数据库
    protected $databaseConfigFile;

    public function beforeAction(Request $request)
    {
        parent::beforeAction($request); // TODO: Change the autogenerated stub
        $this->databaseConfigFile = config_path() . DIRECTORY_SEPARATOR . "thinkorm.php";
        $this->lockFile = public_path() . DIRECTORY_SEPARATOR . "install.lock";
        $this->config = [
            'siteName' => "FunAdmin-webadmin",
            'siteVersion' => config('funadmin.version'),
            'tablePrefix' => "fun_",
            'runtimePath' => runtime_path(),
            'lockFile' => $this->lockFile,
        ];
        View::assign('config', $this->config);
    }

    public function index()
    {
        return redirect('/install/index/step1');
    }

    public function step1()
    {
        return fetch('step1');

    }

    public function step2()
    {
        $data['php_version'] = PHP_VERSION;
        $data['pdo'] = extension_loaded("PDO");
        $data['mysqli'] = extension_loaded("mysqli");
        $data['open_basedir'] = ini_get('open_basedir');;
        $data['database'] = is_really_writable($this->databaseConfigFile);
        $data['gd_info'] = function_exists('gd_info') || class_exists('Imagick', false);
        return fetch('step2', ['data' => $data]);

    }

    public function step3()
    {
        // 检测环境页面
        if (request()->action === 'step3' && request()->isGet()) {
            return fetch('index/step3');
        }
        if (request()->action === 'step3' && request()->isPost()) {
            //执行安装
            $host = request()->post('hostname') ? request()->post('hostname') : '127.0.0.1';
            $port = request()->post('port') ?: '3306';
            //判断是否在主机头后面加上了端口号
            $hostData = explode(":", $host);
            if (isset($hostData) && $hostData && is_array($hostData) && count($hostData) > 1) {
                $host = $hostData[0];
                $port = $hostData[1];
            }
            //mysql的账户相关
            $mysqlUserName = request()->post('username') ?: 'root';
            $mysqlPassword = request()->post('password') ?: 'root';
            $mysqlDatabase = request()->post('database') ?: 'FunAdmin';
            $mysqlPreFix = request()->post('prefix') ?: $this->config['tablePrefix'];
            $mysqlPreFix = rtrim($mysqlPreFix, "_") . "_";
            $adminUserName = request()->post('adminUserName') ?: 'admin';
            $adminPassword = request()->post('adminPassword') ?: '123456';
            $rePassword = request()->post('rePassword') ?: '123456';
            $email = request()->post('email') ?: 'admin@admin.com';
            if (file_exists($this->lockFile)) {
                return $this->error('当前版本已经安装了，如果需要重新安装请先删除install.lock');
            }
            //php 版本
            if (version_compare(PHP_VERSION, '7.2.0', '<')) {
               return $this->error('当前版本(" . PHP_VERSION . ")过低，请使用PHP7.2.0以上版本');
            }
            if (!extension_loaded("PDO")) {
                return $this->error('当前未开启PDO，无法进行安装');
            }
            //判断两次输入是否一致
            if ($adminPassword != $rePassword) {
                return $this->error('两次输入密码不一致！');

            }
            if (!preg_match('/^[0-9a-z_$]{6,16}$/i', $adminPassword)) {
                return $this->error('密码必须6-16位,且必须包含字母和数字,不能有中文和空格');

            }
            if (!preg_match("/^\w+$/", $adminUserName)) {
                return $this->error('用户名只能输入字母、数字、下划线！');
            }
            if (strlen($adminUserName) < 3 || strlen($adminUserName) > 12) {
                return $this->error('用户名请输入3~12位字符！');
            }
            if (strlen($adminPassword) < 5 || strlen($adminPassword) > 16) {
                return $this->error('密码请输入5~16位字符！');
            }
            //检测能否读取安装文件
            $sql = @file_get_contents(public_path() . DIRECTORY_SEPARATOR . 'funadmin.sql');
            if (!$sql) {
                return $this->error("无法读取/public/install/funadmin.sql文件，请检查是否有读权限");
            }
            try {
                // 连接数据库
                $link = @new \mysqli("{$host}:{$port}", $mysqlUserName, $mysqlPassword);
                $error = $link->connect_error;
                if (!is_null($error)) {// 转义防止和alert中的引号冲突
                    $error = addslashes($error);
                    return $this->error("数据库链接失败:$error");
                }
                $link->query('set global wait_timeout=2147480');
                $link->query("set global interactive_timeout=2147480");
                $link->query("set global max_allowed_packet=104857600");
                $link->query("SET NAMES 'utf8mb4'");
                if ($link->server_info < 5.5) {
                    return $this->error("MySQL数据库版本不能低于5.5,请将您的MySQL升级到5.5及以上");
                }
                // 创建数据库并选中
                if (!$link->select_db($mysqlDatabase)) {
                    $create_sql = 'CREATE DATABASE IF NOT EXISTS ' . $mysqlDatabase . ' DEFAULT CHARACTER SET utf8mb4;';
                    if(!$link->query($create_sql)){
                        return $this->error('创建数据库失败');
                    }
                    $link->select_db($mysqlDatabase);
                }
                $link->query("USE `{$mysqlDatabase}`");//使用数据库
                // 写入数据库
                $sqlArr = file(public_path() . '/' . 'funadmin.sql');
                $sql = '';
                foreach ($sqlArr as $value) {
                    if (substr($value, 0, 2) == '--' || $value == '' || substr($value, 0, 2) == '/*')
                        continue;
                    $sql .= $value;
                    if (substr(trim($value), -1, 1) == ';' and $value != 'COMMIT;') {
                        $sql = str_ireplace("`fun_", "`{$mysqlPreFix}", $sql);
                        $sql = str_ireplace('INSERT INTO ', 'INSERT IGNORE INTO ', $sql);
                        try {
                            $link->query($sql);
                        } catch (\PDOException $e) {
                            return $this->error($e->getMessage());
                        }
                        $sql = '';
                    }
                }
                sleep(2);
                $password = password_hash($adminPassword, PASSWORD_BCRYPT);
                $result = $link->query("UPDATE {$mysqlPreFix}admin SET `email`='{$email}',`username` = '{$adminUserName}',`password` = '{$password}' WHERE `username` = 'admin'");
                $result2 = $link->query("UPDATE {$mysqlPreFix}member SET `email`='{$email}',`username` = '{$adminUserName}',`password` = '{$password}' WHERE `username` = 'admin'");
                $databaseConfig = @file_get_contents($this->databaseConfigFile);
                //替换数据库相关配置
                $config = <<<Fun
<?php
return [
    'default' => 'mysql',
    'connections' => [
        'mysql' => [
            // 数据库类型
            'type' => 'mysql',
            // 服务器地址
            'hostname' => getenv('DB_HOST')?:'{$host}',
            // 数据库名
            'database' => getenv('DB_NAME')?:'{$mysqlDatabase}',
            // 数据库用户名
            'username' =>getenv('DB_USER')?:'{$mysqlUserName}',
            // 数据库密码
            'password' => getenv('DB_PASSWORD')?:'{$mysqlPassword}',
            // 数据库连接端口
            'hostport' => getenv('DB_PORT')?:'{$port}',
            // 数据库连接参数
            'params' => [],
            // 数据库编码默认采用utf8
            'charset' => 'utf8mb4',
            // 数据库表前缀
            'prefix' =>  getenv('DB_PREFIX')?:'{$mysqlPreFix}',
            // 断线重连
            'break_reconnect' => true,
            // 关闭SQL监听日志
            'trigger_sql' => false,
        ],
    ],
];
Fun;
                $putConfig = @file_put_contents($this->databaseConfigFile, $config);
                if (!$putConfig) {
                    return $this->error('安装失败、请确定database.php是否有写入权限！:' . $error);
                }
                $result = touch($this->lockFile);
                if (!$result) {
                    return $this->error("安装失败、请确定install.lock是否有写入权限！:$error");
                }
                $adminUser['admin'] = $adminUserName;
                $adminUser['password'] = $adminPassword;
                request()->session()->set('admin_install', $adminUser);
            } catch (\Exception $e) {
                $errMsg = $e->getMessage();
                return $this->error($errMsg);
            }
            return $this->success('安装成功,安装后请重新启动程序');
        }
    }

    public function step4()
    {
        //完成安装
        return fetch('index/step4');
    }


}